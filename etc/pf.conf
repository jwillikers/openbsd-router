# See pf.conf(5) and /etc/examples/pf.conf

table <trusted_lan_routers> { 10.1.0.1 }
table <guest_lan_routers> { 10.2.0.1 }
table <iot_lan_routers> { 10.3.0.1 }
table <work_lan_routers> { 10.4.0.1 }

trusted_lan_primary_dns_server = 10.1.0.1
guest_lan_primary_dns_server = 10.2.0.1
iot_lan_primary_dns_server = 10.3.0.1
work_lan_primary_dns_server = 10.4.0.1

table <trusted_lan_dns_servers> { 10.1.0.1 }
table <guest_lan_dns_servers> { 10.2.0.1 }
table <iot_lan_dns_servers> { 10.3.0.1 }
table <work_lan_dns_servers> { 10.4.0.1 }

# ESPHome, Home Assistant, InfluxDB, and MQTT
table <iot_servers> { 10.1.0.40 10.1.0.47 }

# Monitoring servers such as Nagios.
table <monitoring_servers> { 10.1.0.43 }

table <martians> { 0.0.0.0/8 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
                   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 \
                   ::/128 ::/96 ::1/128 ::ffff:0:0/96 100::/64 2001:10::/28 2001:2::/48 2001:db8::/32 3ffe::/16 fec0::/10 fc00::/7 }

table <google_dns_servers> { 8.8.8.8 8.8.4.4 }

table <tailscale_vpn_dns_servers> { 100.127.231.23 fd7a:115c:a1e0:ab12:4843:cd96:627f:e717 }

icmp_types = "{ echoreq, unreach }"


# The port 5540, both tcp and udp, is reserved for Matter Operational Discovery and Communication.
# It's used specifically for multicast.
matter_port = 5540

set block-policy drop
set loginterface egress
set optimization aggressive
set skip on lo

block all

# Sample debug logging statement.
# match log (matches) from 2606:4700:4700::1111 to 2604:2800:2:a143:69aa:b9c8:2910:311f
# match log (matches) from 2604:2800:2:a143:69aa:b9c8:2910:311f to 2606:4700:4700::1111
# match log (matches) from any to 2606:4700:4700::1111
# match log (matches) from 2606:4700:4700::1111 to any

#match log (matches) from 10.1.0.21 to 10.1.0.22
#match log (matches) from 10.1.0.21 to 10.1.0.23
#match log (matches) from 10.1.0.21 to 10.1.0.24
#match log (matches) from 10.1.0.22 to 10.1.0.21
#match log (matches) from 10.1.0.22 to 10.1.0.23
#match log (matches) from 10.1.0.22 to 10.1.0.24
#match log (matches) from 10.1.0.23 to 10.1.0.21
#match log (matches) from 10.1.0.23 to 10.1.0.22
#match log (matches) from 10.1.0.23 to 10.1.0.24
#match log (matches) from any to 10.9.14.254

#match log (matches) from any to 224.0.0.251 
#match log (matches) from any to ff02::fb

match in all scrub (no-df random-id)
match out on egress inet from !(egress:network) to any nat-to (egress:0)
antispoof for egress

pass out inet
pass out inet6
pass in on { trusted_lan guest_lan iot_lan work_lan } inet
pass in on { trusted_lan guest_lan iot_lan work_lan } inet6

block in on egress from any to <martians>

pass out on egress inet proto udp to port 33433:33626
pass inet proto icmp icmp-type $icmp_types

pass in on egress inet6 proto udp \
  from fe80::/10 port dhcpv6-server \
  to fe80::/10 port dhcpv6-client \
  no state

pass out on egress inet6 proto udp from any to any port 33433 >< 33626 keep state
pass inet6 proto icmp6 all

# For the trusted and work LAN's, allow devices to talk with the other devices in their respective network.
pass on trusted_lan from trusted_lan:network to trusted_lan:network
pass on work_lan from work_lan:network to work_lan:network

# Always allow the devices on a network to talk to their respective routers and DNS servers.
pass on guest_lan from guest_lan:network to { <guest_lan_routers> <guest_lan_dns_servers> }
pass on guest_lan from { <guest_lan_routers> <guest_lan_dns_servers> } to guest_lan:network
pass on iot_lan from iot_lan:network to { <iot_lan_routers> <iot_lan_dns_servers> }
pass on iot_lan from { <iot_lan_routers> <iot_lan_dns_servers> } to iot_lan:network

# Allow IoT devices to connect to IoT-related services, i.e. ESPHome, Home Assistant, InfluxDB, and MQTT in addition to monitoring servers.
pass on { iot_lan trusted_lan } from iot_lan:network to { <iot_servers> <monitoring_servers> }
pass on { iot_lan trusted_lan } from { <iot_servers> <monitoring_servers> } to iot_lan:network

# Redirect DNS traffic
pass in on trusted_lan inet proto { tcp udp } to <google_dns_servers> port domain divert-to $trusted_lan_primary_dns_server port domain
pass in on guest_lan inet proto { tcp udp } to <google_dns_servers> port domain divert-to $guest_lan_primary_dns_server port domain
pass in on iot_lan inet proto { tcp udp } to <google_dns_servers> port domain divert-to $iot_lan_primary_dns_server port domain
pass in on work_lan inet proto { tcp udp } to <google_dns_servers> port domain divert-to $work_lan_primary_dns_server port domain

# Allow multicast networking
pass on { iot_lan trusted_lan } proto igmp all allow-opts
pass on { iot_lan trusted_lan } inet proto udp from any to 224.0.0.0/4
pass on { iot_lan trusted_lan } inet6 proto udp from any to ff00::/8

# mDNS is required to support Matter devices.

# Allow mDNS and Matter
pass inet proto udp from any to 224.0.0.251 port { $matter_port mdns } allow-opts
pass inet6 proto udp from any to ff02::fb port { $matter_port mdns } allow-opts

# Matter also uses TCP
pass inet proto tcp from any to 224.0.0.251 port $matter_port allow-opts
pass inet6 proto tcp from any to ff02::fb port $matter_port allow-opts

# SSDP
pass on { iot_lan trusted_lan } proto udp from any to 239.255.255.250 port ssdp allow-opts
pass on { iot_lan trusted_lan } inet6 proto udp from any to { ff02::c ff05::c ff08::c ff0e::c } port ssdp allow-opts

# Tailscale VPN DNS
pass in on tun0 inet proto { tcp udp } from 100.64.0.0/10 to <tailscale_vpn_dns_servers> port { domain ssh }
pass in on tun0 inet6 proto { tcp udp } from fc00::/7 to <tailscale_vpn_dns_servers> port { domain ssh }
